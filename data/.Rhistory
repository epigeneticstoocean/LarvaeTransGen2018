summary(larveccenfin)
# Chunk 25: PerimeterStat
larvperim<-lmer(LarvaePerimeterum~ParentTrt*JarSatArg_SW+ (1|FemaleID)+(1|MaleID)+(1|CrossID)+(1|JarSeatable)+(1|JarID)+(1|TrtTankID)+(1|MaleTrtTankID), data=LarvaeDat)
steppedlarvperim<- step(larvperim)
print(steppedlarvperim)
#final model chosen by the step function: LarvaePerimeterum~SatArag_ATDIC*JarTrt+ (1|FemaleID)+(1|MaleID)+(1|JarSeatable)+(1|JarID)
larvperimfin<- lmer(LarvaePerimeterum~ParentTrt*JarSatArg_SW+ (1|FemaleID)+(1|MaleID)+(1|JarSeatable)+(1|JarID), data=LarvaeDat)
#check the model to see that it meets assumptions
plot(larvperimfin) #seems to meet assumption of linearity and homoscedasticity
qqnorm(resid(larvperimfin))
qqline(resid(larvperimfin)) #has relatively long tails, doesn't meet assumption of normality.
acf(resid(larvperimfin)) #this looks fine to me.
summary(larvperimfin)
# Chunk 26: SurvivalStat
surv1<- lmer(RatSurv~ParentTrt+ (1|FemaleID)+(1|MaleID)+(1|TrtTankID)+(1|MaleTrtTankID), data=SurvWideDat)
plot(surv1)
qqnorm(resid(surv1))
qqline(resid(surv1))
acf(resid(surv1))
survstepFE<- step(surv1)
print(survstepFE)
survfin<- lmer(RatSurv~ (1|FemaleID), data=SurvWideDat)#final model chosen by step function: RatSurv~ (1|FemaleID)
plot(survfin)
qqnorm(resid(survfin))
qqline(resid(survfin))
acf(resid(survfin))
summary(survfin)
#try to see if this is significantly different for exposed vs control
SurvOA<- subset(SurvWideDat, ParentTrt=="2600")
SurvCon<- subset(SurvWideDat, ParentTrt=="400")
t.test(SurvOA$RatSurv, mu = 1, alternative = "two.sided")
t.test(SurvCon$RatSurv, mu = 1, alternative = "two.sided")
# Chunk 27: CoeffVar Stats
GPDcoeffvar<-lmer(coeffvar_GrowthPerDay~ParentTrt*JarSatArg_SW+ (1|FemaleID)+(1|MaleID)+(1|CrossID)+(1|JarSeatable)+(1|TrtTankID)+(1|MaleTrtTankID), data=LarvByJarDat)
steppedGPDCoeffvar<-step(GPDcoeffvar)
print(GPDcoeffvar)
#looks like it doesn't choose a model with any random effects.
GPDCoeffVarlm<- lm(log(coeffvar_GrowthPerDay)~ParentTrt*JarSatArg_SW, data=LarvByJarDat, na.action=na.exclude)
GPDCoeffVarlm1<- lm(log(coeffvar_GrowthPerDay)~ParentTrt+JarSatArg_SW, data=LarvByJarDat, na.action=na.exclude)
anova(GPDCoeffVarlm1, GPDCoeffVarlm)
par(mfcol=c(2,2))
plot(GPDCoeffVarlm1)
par(mfcol=c(1,1))
shapiro.test(resid(GPDCoeffVarlm1))
summary(GPDCoeffVarlm1)
acf(resid(GPDCoeffVarlm1)) #this looks good
#does not look like it meets assumptions.
# Chunk 28: FinalModelsWithSameRandomEffects
summary(larvgrowfin)
summary(larvareafint)
summary(larvlenfin)
summary(larvperimfin)
summary(PerDiRatFin)
# Chunk 29: LegendEnhanced functioin
legend.enhanced <- function (x, y = NULL, legend, fill = NULL, col = par("col"),
border = "black", lty, lwd, pch, angle = 45, density = NULL,
bty = "o", bg = par("bg"), box.lwd = par("lwd"), box.lty = par("lty"),
box.col = par("fg"), pt.bg = NA, cex = 1, pt.cex = cex,
pt.lwd = lwd, xjust = 0, yjust = 1, x.intersp = 1, y.intersp = 1,
adj = c(0, 0.5), text.width = NULL, text.col = par("col"),
text.font = NULL, merge = do.lines && has.pch, trace = FALSE,
plot = TRUE, ncol = 1, horiz = FALSE, title = NULL, inset = 0,
xpd, title.col = text.col, title.adj = c(0.5,0), seg.len = 2)
{
if (missing(legend) && !missing(y) && (is.character(y) ||
is.expression(y))) {
legend <- y
y <- NULL
}
mfill <- !missing(fill) || !missing(density)
if (!missing(xpd)) {
op <- par("xpd")
on.exit(par(xpd = op))
par(xpd = xpd)
}
title <- as.graphicsAnnot(title)
if (length(title) > 1)
stop("invalid 'title'")
legend <- as.graphicsAnnot(legend)
n.leg <- if (is.call(legend))
1
else length(legend)
if (n.leg == 0)
stop("'legend' is of length 0")
auto <- if (is.character(x))
match.arg(x, c("bottomright", "bottom", "bottomleft",
"left", "topleft", "top", "topright", "right", "center"))
else NA
if (is.na(auto)) {
xy <- xy.coords(x, y)
x <- xy$x
y <- xy$y
nx <- length(x)
if (nx < 1 || nx > 2)
stop("invalid coordinate lengths")
}
else nx <- 0
xlog <- par("xlog")
ylog <- par("ylog")
rect2 <- function(left, top, dx, dy, density = NULL, angle,
...) {
r <- left + dx
if (xlog) {
left <- 10^left
r <- 10^r
}
b <- top - dy
if (ylog) {
top <- 10^top
b <- 10^b
}
rect(left, top, r, b, angle = angle, density = density,
...)
}
segments2 <- function(x1, y1, dx, dy, ...) {
x2 <- x1 + dx
if (xlog) {
x1 <- 10^x1
x2 <- 10^x2
}
y2 <- y1 + dy
if (ylog) {
y1 <- 10^y1
y2 <- 10^y2
}
segments(x1, y1, x2, y2, ...)
}
points2 <- function(x, y, ...) {
if (xlog)
x <- 10^x
if (ylog)
y <- 10^y
points(x, y, ...)
}
text2 <- function(x, y, ...) {
if (xlog)
x <- 10^x
if (ylog)
y <- 10^y
text(x, y, ...)
}
if (trace)
catn <- function(...) do.call("cat", c(lapply(list(...),
formatC), list("\n")))
cin <- par("cin")
Cex <- cex * par("cex")
if (is.null(text.width))
text.width <- max(abs(strwidth(legend, units = "user",
cex = cex, font = text.font)))
else if (!is.numeric(text.width) || text.width < 0)
stop("'text.width' must be numeric, >= 0")
xc <- Cex * xinch(cin[1L], warn.log = FALSE)
yc <- Cex * yinch(cin[2L], warn.log = FALSE)
if (xc < 0)
text.width <- -text.width
xchar <- xc
xextra <- 0
yextra <- yc * (y.intersp - 1)
ymax <- yc * max(1, strheight(legend, units = "user", cex = cex)/yc)
ychar <- yextra + ymax
if (trace)
catn("  xchar=", xchar, "; (yextra,ychar)=", c(yextra,
ychar))
if (mfill) {
xbox <- xc * 0.8
ybox <- yc * 0.5
dx.fill <- xbox
}
do.lines <- (!missing(lty) && (is.character(lty) || any(lty >
0))) || !missing(lwd)
n.legpercol <- if (horiz) {
if (ncol != 1)
warning(gettextf("horizontal specification overrides: Number of columns := %d",
n.leg), domain = NA)
ncol <- n.leg
1
}
else ceiling(n.leg/ncol)
has.pch <- !missing(pch) && length(pch) > 0
if (do.lines) {
x.off <- if (merge)
-0.7
else 0
}
else if (merge)
warning("'merge = TRUE' has no effect when no line segments are drawn")
if (has.pch) {
if (is.character(pch) && !is.na(pch[1L]) && nchar(pch[1L],
type = "c") > 1) {
if (length(pch) > 1)
warning("not using pch[2..] since pch[1L] has multiple chars")
np <- nchar(pch[1L], type = "c")
pch <- substr(rep.int(pch[1L], np), 1L:np, 1L:np)
}
if (!is.character(pch))
pch <- as.integer(pch)
}
if (is.na(auto)) {
if (xlog)
x <- log10(x)
if (ylog)
y <- log10(y)
}
if (nx == 2) {
x <- sort(x)
y <- sort(y)
left <- x[1L]
top <- y[2L]
w <- diff(x)
h <- diff(y)
w0 <- w/ncol
x <- mean(x)
y <- mean(y)
if (missing(xjust))
xjust <- 0.5
if (missing(yjust))
yjust <- 0.5
}
else {
h <- (n.legpercol + (!is.null(title))) * ychar + yc
w0 <- text.width + (x.intersp + 1) * xchar
if (mfill)
w0 <- w0 + dx.fill
if (do.lines)
w0 <- w0 + (seg.len + x.off) * xchar
w <- ncol * w0 + 0.5 * xchar
if (!is.null(title) && (abs(tw <- strwidth(title, units = "user",
cex = cex) + 0.5 * xchar)) > abs(w)) {
xextra <- (tw - w)/2
w <- tw
}
if (is.na(auto)) {
left <- x - xjust * w
top <- y + (1 - yjust) * h
}
else {
usr <- par("usr")
inset <- rep_len(inset, 2)
insetx <- inset[1L] * (usr[2L] - usr[1L])
left <- switch(auto, bottomright = , topright = ,
right = usr[2L] - w - insetx, bottomleft = ,
left = , topleft = usr[1L] + insetx, bottom = ,
top = , center = (usr[1L] + usr[2L] - w)/2)
insety <- inset[2L] * (usr[4L] - usr[3L])
top <- switch(auto, bottomright = , bottom = , bottomleft = usr[3L] +
h + insety, topleft = , top = , topright = usr[4L] -
insety, left = , right = , center = (usr[3L] +
usr[4L] + h)/2)
}
}
if (plot && bty != "n") {
if (trace)
catn("  rect2(", left, ",", top, ", w=", w, ", h=",
h, ", ...)", sep = "")
rect2(left, top, dx = w, dy = h, col = bg, density = NULL,
lwd = box.lwd, lty = box.lty, border = box.col)
}
xt <- left + xchar + xextra + (w0 * rep.int(0:(ncol - 1),
rep.int(n.legpercol, ncol)))[1L:n.leg]
yt <- top - 0.5 * yextra - ymax - (rep.int(1L:n.legpercol,
ncol)[1L:n.leg] - 1 + (!is.null(title))) * ychar
if (mfill) {
if (plot) {
if (!is.null(fill))
fill <- rep_len(fill, n.leg)
rect2(left = xt, top = yt + ybox/2, dx = xbox, dy = ybox,
col = fill, density = density, angle = angle,
border = border)
}
xt <- xt + dx.fill
}
if (plot && (has.pch || do.lines))
col <- rep_len(col, n.leg)
if (missing(lwd) || is.null(lwd))
lwd <- par("lwd")
if (do.lines) {
if (missing(lty) || is.null(lty))
lty <- 1
lty <- rep_len(lty, n.leg)
lwd <- rep_len(lwd, n.leg)
ok.l <- !is.na(lty) & (is.character(lty) | lty > 0) &
!is.na(lwd)
if (trace)
catn("  segments2(", xt[ok.l] + x.off * xchar, ",",
yt[ok.l], ", dx=", seg.len * xchar, ", dy=0, ...)")
if (plot)
segments2(xt[ok.l] + x.off * xchar, yt[ok.l], dx = seg.len *
xchar, dy = 0, lty = lty[ok.l], lwd = lwd[ok.l],
col = col[ok.l])
xt <- xt + (seg.len + x.off) * xchar
}
if (has.pch) {
pch <- rep_len(pch, n.leg)
pt.bg <- rep_len(pt.bg, n.leg)
pt.cex <- rep_len(pt.cex, n.leg)
pt.lwd <- rep_len(pt.lwd, n.leg)
ok <- !is.na(pch)
if (!is.character(pch)) {
ok <- ok & (pch >= 0 | pch <= -32)
}
else {
ok <- ok & nzchar(pch)
}
x1 <- (if (merge && do.lines)
xt - (seg.len/2) * xchar
else xt)[ok]
y1 <- yt[ok]
if (trace)
catn("  points2(", x1, ",", y1, ", pch=", pch[ok],
", ...)")
if (plot)
points2(x1, y1, pch = pch[ok], col = col[ok], cex = pt.cex[ok],
bg = pt.bg[ok], lwd = pt.lwd[ok])
}
xt <- xt + x.intersp * xchar
if (plot) {
if (is.na(title.adj[2])) { title.adj[2] <- 0}
if (!is.null(title))
text2(left + w * title.adj[1], top - ymax, labels = title,
adj = c(title.adj[1], title.adj[2]), cex = cex, col = title.col)
text2(xt, yt, labels = legend, adj = adj, cex = cex,
col = text.col, font = text.font)
}
invisible(list(rect = list(w = w, h = h, left = left, top = top),
text = list(x = xt, y = yt)))
}
# Chunk 30: MultipanelFigure
par(mfcol=c(1,1), mar=c(4,4.3, .75,1))
p1=visreg(larvgrowfin, "JarSatArg_SW", by="ParentTrt", overlay=TRUE, ylab=expression(paste("Growth (", mu, "m/day)")), xlab=expression(paste("Larvae Treatment ", Omega[Aragonite])), legend=FALSE)
par(mfcol=c(2,2))
p2<-visreg(larvlenfin, "JarSatArg_SW", by="ParentTrt", overlay=TRUE, ylab=expression(paste("Length (", mu, "m)")), xlab="", legend=FALSE)
p3<-visreg(larvareafint, "JarSatArg_SW", by="ParentTrt", overlay=TRUE, ylab=expression(sqrt(paste("Area (", mu, m^2,")"))), xlab=expression(paste("Larvae Treatment ", Omega[Aragonite])), legend=FALSE)
p4<-visreg(larvperimfin, "JarSatArg_SW", by="ParentTrt", overlay=TRUE, ylab=expression(paste("Perimeter (", mu, "m)")), xlab="", legend=FALSE)
p5<-visreg(PerDiRatFin, "JarSatArg_SW", by="ParentTrt", overlay=TRUE, ylab="Perimeter :Length", xlab=expression(paste("Larvae Treatment ", Omega[Aragonite])), legend=FALSE)
# Chunk 31: OA:Control Calcification
#get means of the data for each family for each treatment
FamMeans<- ddply(LarvByJarDat, .(CrossID, JarTrt), numcolwise(mean, na.rm=T))
#use spread function in tidyr to make the families in wide form
FamMeansWide<- pivot_wider(FamMeans, id_cols= CrossID, names_from= JarTrt, values_from= c(GrowthPerDay, LarvaeAreaum2, LarvaeDiamum, LarvaePerimeterum))
FamMeansWide$OACont_GPD<- (FamMeansWide$GrowthPerDay_Exposed-FamMeansWide$GrowthPerDay_Control)/FamMeansWide$GrowthPerDay_Control
FamMeansWide$OACont_Len<- (FamMeansWide$LarvaeDiamum_Exposed-FamMeansWide$LarvaeDiamum_Control)/FamMeansWide$LarvaeDiamum_Control
FamMeansWide$OACont_SA<- (FamMeansWide$LarvaeAreaum2_Exposed-FamMeansWide$LarvaeAreaum2_Control)/FamMeansWide$LarvaeAreaum2_Control
FamMeansWide$OACont_P<- (FamMeansWide$LarvaePerimeterum_Exposed-FamMeansWide$LarvaePerimeterum_Control)/FamMeansWide$LarvaePerimeterum_Control
write.csv(FamMeansWide,"~/R/GitHub/LarvaeTransGen2018/data/CalcPercDiffs.csv", row.names = FALSE)
# Chunk 32: Visualize Calcification Variance
#EF01_EM01 only has one cross, so a boxplot won't work. Remove from the data before trying to make the plots:
LarvByJarVarVizDat<- subset(LarvByJarDat, CrossID !="EF01_EM01_B1_QG")
ggplot(LarvByJarVarVizDat, aes(y=GrowthPerDay,x=as.factor(MaleIDPlain), color=JarTrt))+
geom_boxplot(alpha=0.5, position="identity") +
facet_grid(~FemIDPlain, scale="free_x")+
labs(x = "Male ID", y= expression(paste("Growth (", mu, "m/day)")), title = "Female ID") +
scale_color_manual(name = "Larval Treatment", labels = c("Control", "OA"), values = c("#00BFC4", "#F8766D"))+
geom_hline(yintercept=0)+
theme_classic() +
theme(axis.title.y.right = element_blank(),                # hide right axis title
axis.text.y.right = element_blank(),                 # hide right axis labels
axis.ticks.y = element_blank(),                      # hide left/right axis ticks
axis.text.y = element_text(margin = margin(r = 0)),  # move left axis labels closer to axis
panel.spacing = unit(0.7, "mm"),                    # remove spacing between facets
strip.background = element_rect(size = 0.5), axis.text.x=element_text(angle=90),plot.title = element_text(size=10, hjust = 0.5))
ggplot(LarvByJarVarVizDat, aes(y=LarvaeAreaum2,x=MaleIDPlain, color=JarTrt))+
geom_boxplot(alpha=0.5, position="identity") +
facet_grid(~FemIDPlain, scale="free_x")+
labs(x = "Male ID", y= expression(paste("Surface Area (", mu, m^2,")")), title = "Female ID") +
scale_color_manual(name = "Larval Treatment", labels = c("Control", "OA"), values = c("#00BFC4", "#F8766D"))+
theme_classic() +
theme(axis.title.y.right = element_blank(),                # hide right axis title
axis.text.y.right = element_blank(),                 # hide right axis labels
axis.ticks.y = element_blank(),                      # hide left/right axis ticks
axis.text.y = element_text(margin = margin(r = 0)),  # move left axis labels closer to axis
panel.spacing = unit(0.7, "mm"),                    # remove spacing between facets
strip.background = element_rect(size = 0.5), axis.text.x=element_text(angle=90),plot.title = element_text(size=10, hjust = 0.5))
ggplot(LarvByJarVarVizDat, aes(y=LarvaeDiamum ,x=MaleIDPlain, color=JarTrt))+
geom_boxplot(alpha=0.5, position="identity") +
facet_grid(~FemIDPlain, scale="free_x")+
labs(x = "Male ID", y= expression(paste("Length (", mu, "m)")), title = "Female ID") +
scale_color_manual(name = "Larval Treatment", labels = c("Control", "OA"), values = c("#00BFC4", "#F8766D"))+
theme_classic() +
theme(axis.title.y.right = element_blank(),                # hide right axis title
axis.text.y.right = element_blank(),                 # hide right axis labels
axis.ticks.y = element_blank(),                      # hide left/right axis ticks
axis.text.y = element_text(margin = margin(r = 0)),  # move left axis labels closer to axis
panel.spacing = unit(0.7, "mm"),                    # remove spacing between facets
strip.background = element_rect(size = 0.5), axis.text.x=element_text(angle=90),plot.title = element_text(size=10, hjust = 0.5))
ggplot(LarvByJarVarVizDat, aes(y=LarvaePerimeterum ,x=MaleIDPlain, color=JarTrt))+
geom_boxplot(alpha=0.5, position="identity") +
facet_grid(~FemIDPlain, scale="free_x")+
labs(x = "Male ID", y= expression(paste("Perimeter (", mu, "m)")), title = "Female ID") +
scale_color_manual(name = "Larval Treatment", labels = c("Control", "OA"), values = c("#00BFC4", "#F8766D"))+
theme_classic() +
theme(axis.title.y.right = element_blank(),                # hide right axis title
axis.text.y.right = element_blank(),                 # hide right axis labels
axis.ticks.y = element_blank(),                      # hide left/right axis ticks
axis.text.y = element_text(margin = margin(r = 0)),  # move left axis labels closer to axis
panel.spacing = unit(0.7, "mm"),                    # remove spacing between facets
strip.background = element_rect(size = 0.5), axis.text.x=element_text(angle=90),plot.title = element_text(size=10, hjust = 0.5))
ggplot(LarvByJarVarVizDat, aes(y=(LarvaePerimeterum/LarvaeDiamum),x=MaleIDPlain, color=JarTrt))+
geom_boxplot(alpha=0.5, position="identity") +
facet_grid(~FemIDPlain, scale="free_x")+
labs(x = "Male ID", y= paste("Perimeter:Length"), title = "Female ID") +
scale_color_manual(name = "Larval Treatment", labels = c("Control", "OA"), values = c("#00BFC4", "#F8766D"))+
geom_hline(yintercept= 3.142)+
theme_classic() +
theme(axis.title.y.right = element_blank(),                # hide right axis title
axis.text.y.right = element_blank(),                 # hide right axis labels
axis.ticks.y = element_blank(),                      # hide left/right axis ticks
axis.text.y = element_text(margin = margin(r = 0)),  # move left axis labels closer to axis
panel.spacing = unit(0.7, "mm"),                    # remove spacing between facets
strip.background = element_rect(size = 0.5), axis.text.x=element_text(angle=90),plot.title = element_text(size=10, hjust = 0.5))
# Chunk 33: SurvivalVisualization
SurvDat$SimpleCross<- paste(vapply(strsplit(SurvDat$CrossID, ""), '[', 4, FUN.VALUE = character(1)), vapply(strsplit(SurvDat$CrossID, ""), '[', 9, FUN.VALUE=character(1)), sep="_")
SurvDat$SimpleMale<-paste(vapply(strsplit(SurvDat$CrossID, ""), '[', 9, FUN.VALUE=character(1)))
SurvDat$SimpleFemale<- paste(vapply(strsplit(SurvDat$CrossID, ""), '[', 4, FUN.VALUE = character(1)))
SurvDat$ParentTrt<- factor(SurvDat$ParentTrt, levels=c("400", "2600"))
MeanSurvDat<- ddply(SurvWideDat, .(ParentTrt), numcolwise(mean, na.rm=T))
MeanSurvDat$ParentTrt<- factor(MeanSurvDat$ParentTrt, levels= c("400", "2600"))
SESurvDat<- ddply(SurvWideDat, .(ParentTrt), numcolwise(se, na.rm=T))
SESurvDat$ParentTrt<- factor(SESurvDat$ParentTrt, levels= c("400", "2600"))
#make reaction norms for survival color will be parent treatment. X will be jar treatment. Each cross will be its own line
ParTreat<- c("400"="Control-exposed Parents", "2600"="OA-exposed Parents")
ggplot(SurvDat,aes(x=JarTrt, y=LarvaeSurvived, color = SimpleCross, group= CrossID)) +
geom_point(aes(color=SimpleCross))+
geom_line(aes(color=SimpleCross, group=CrossID, linetype=SimpleFemale))+
geom_errorbar(aes(ymin= LarvaeSurvived-SELarvaeSurvived, ymax=LarvaeSurvived+SELarvaeSurvived),width=0.05, position=position_dodge(0))+
labs(x = "Larvae Treatment", y = "Number of Larvae Survived") +
facet_grid(~ParentTrt)+
theme_classic()
ggplot(SurvDat,aes(x=JarTrt, y=LarvaeSurvived, color = "black45", group= CrossID)) +
geom_point(aes(color="black45"))+
geom_line(aes(color="black45", group=CrossID))+
geom_errorbar(aes(ymin= LarvaeSurvived-SELarvaeSurvived, ymax=LarvaeSurvived+SELarvaeSurvived),width=0.05, position=position_dodge(0))+
labs(x = "Larvae Treatment", y = "Number of Larvae Survived") +
scale_color_manual(values="black")+
facet_grid(.~ParentTrt, labeller =labeller(ParentTrt = ParTreat))+
theme_classic()
#try to plot survival
ggplot(SurvWideDat,aes(x=ParentTrt, y=RatSurv, color = "gray45")) +
geom_point(aes(color="gray45"))+
labs(x = "Parent Treatment", y = "Proportion of Surviving Larvae") +
scale_color_manual(values="gray45")+
theme_classic()
#make bar graph of survival
ggplot(data = MeanSurvDat, aes(x = ParentTrt, y = RatSurv, fill="gray45")) +
geom_bar(stat="identity", position="dodge")+
ylim(c(0,1))+
geom_hline(yintercept=1)+
geom_errorbar(aes(ymin= RatSurv-SESurvDat$RatSurv, ymax=RatSurv+SESurvDat$RatSurv),width=0.2, position=position_dodge(.9))+
labs(x = "Parent Treatment", y = "Proportion of Surviving Larvae") +
scale_x_discrete(breaks=c("400","2600"),
labels=c("Control", "OA"))+
scale_fill_manual(values = "gray45") +
theme_classic()
# Chunk 34: OA:Control Survival
SurvWideDat$OACont_Perc<- (SurvWideDat$MeanLarvSurvivedExp-SurvWideDat$MeanLarvSurvivedCon)/SurvWideDat$MeanLarvSurvivedCon
write.csv(SurvWideDat,"~/R/GitHub/LarvaeTransGen2018/data/SurvDatPercent.csv", row.names = FALSE)
ggplot(LarvByJarVarVizDat, aes(y=LarvaeSurvived,x=MaleIDPlain, color=JarTrt))+
geom_boxplot(alpha=0.5, position="identity") +
facet_grid(~FemIDPlain, scale="free_x")+
labs(x = "Male ID", y= paste("Number of Surviving Larvae"), title = "Female ID") +
scale_color_manual(name = "Larval Treatment", labels = c("Control", "OA"), values = c("#00BFC4", "#F8766D"))+
theme_classic() +
theme(axis.title.y.right = element_blank(),                # hide right axis title
axis.text.y.right = element_blank(),                 # hide right axis labels
axis.ticks.y = element_blank(),                      # hide left/right axis ticks
axis.text.y = element_text(margin = margin(r = 0)),  # move left axis labels closer to axis
panel.spacing = unit(0.7, "mm"),                    # remove spacing between facets
strip.background = element_rect(size = 0.5), axis.text.x=element_text(angle=90),plot.title = element_text(size=10, hjust = 0.5))
# Chunk 35: GetDescriptiveStats
#get the mean length of the oysters collected (n=80)
mean(Adult_Sample$AdultLength*2.54)
sd(Adult_Sample$AdultLength*2.54)
se(Adult_Sample$AdultLength*2.54)
#get means for the data
meanJarTrt<- ddply(LarvaeDat, .(JarTrt, ParentTrt), numcolwise(mean, na.rm=T))
seJarTrt<- ddply(LarvaeDat, .(JarTrt, ParentTrt), numcolwise(se, na.rm=T))
mgpd<- subset(meanJarTrt, select= c(JarTrt, ParentTrt, GrowthPerDay, LarvaeDiamum, LarvaeAreaum2, LarvaePerimeterum))
(mgpd$GrowthPerDay[3]-mgpd$GrowthPerDay[4])/mgpd$GrowthPerDay[4]
(mgpd$GrowthPerDay[1]-mgpd$GrowthPerDay[2])/mgpd$GrowthPerDay[2]
(mgpd$LarvaeDiamum[3]-mgpd$LarvaeDiamum[4])/mgpd$LarvaeDiamum[4]
(mgpd$LarvaeDiamum[1]-mgpd$LarvaeDiamum[2])/mgpd$LarvaeDiamum[2]
mean(mgpd$LarvaeDiamum[1:2])/mean(mgpd$LarvaeDiamum[3:4])
(mgpd$LarvaeAreaum2[3]-mgpd$LarvaeAreaum2[4])/mgpd$LarvaeAreaum2[4]
(mgpd$LarvaeAreaum2[1]-mgpd$LarvaeAreaum2[2])/mgpd$LarvaeAreaum2[2]
mean(mgpd$LarvaeAreaum2[1:2])/mean(mgpd$LarvaeAreaum2[3:4])
(mgpd$LarvaePerimeterum[3]-mgpd$LarvaePerimeterum[4])/mgpd$LarvaePerimeterum[4]
(mgpd$LarvaePerimeterum[1]-mgpd$LarvaePerimeterum[2])/mgpd$LarvaePerimeterum[2]
mean(mgpd$LarvaePerimeterum[1:2])/mean(mgpd$LarvaePerimeterum[3:4])
mean(SurvWideDat$RatSurv, na.rm=TRUE)
# Chunk 36: ExportFigures
plots.dir.path<- list.files(tempdir(), pattern="rs-graphics", full.names= TRUE)
plots.png.paths<- list.files(plots.dir.path, pattern=".png", full.names=TRUE)
file.copy(from=plots.png.paths, to="../results")
# Chunk 37: t-tests
#get Bonferoni adjusted p-crit:
0.05/10
Lexp<- subset(LarvaeDat, JarTrt=="Exposed")
Lcon<- subset(LarvaeDat, JarTrt=="Control")
t.test(GrowthPerDay~ParentTrt, data=Lexp)
t.test(GrowthPerDay~ParentTrt, data=Lcon)
t.test(LarvaeDiamum~ParentTrt, data=Lexp)
t.test(LarvaeDiamum~ParentTrt, data=Lcon)#not significantly different for control larvae
t.test(LarvaeAreaum2~ParentTrt, data=Lexp)
t.test(LarvaeAreaum2~ParentTrt, data=Lcon) #not signficantly different for control larvae
t.test(LarvaePerimeterum~ParentTrt, data=Lexp)
t.test(LarvaePerimeterum~ParentTrt, data=Lcon) #not significantly different for control larvae
t.test(PerimLenRat~ParentTrt, data=Lexp)
t.test(PerimLenRat~ParentTrt, data=Lcon)#not significantly different for control larvae
View(mgpd)
#get difference in gpd within parental treatments
(mgpd$GrowthPerDay[4]- mgpd$GrowthPerDay[2])/mgpd$GrowthPerDay[2] #control parents
(mgpd$GrowthPerDay[3]- mgpd$GrowthPerDay[1])/mgpd$GrowthPerDay[1] #exposed parents
(mgpd$GrowthPerDay[3]- mgpd$GrowthPerDay[2])/mgpd$GrowthPerDay[2] #exposed parents exposed larvae vs. control parents control larvae
