# ATcalc - AT calculated
# pCO2
# HCO3
# CO3
# CO2
# Calcite - calcite saturation state
# Aragonite - aragonite saturation state
CarbChemSummary<- function(DF){
Data<- subset(DF, select= c("Trt", "pH", "Sal", "Temp", "DIC", "ATmeas", "ATcalc", "pCO2", "HCO3", "CO3", "CO2", "Calcite", "Aragonite")) #select only the relevant fields
Means<- ddply(Data, .(Trt), numcolwise(mean, na.rm=T)) #get the means
Means[,2]<- round(Means[,2], 2) #round pH to 2 decimal places
Means[,3:4]<- round(Means[,3:4], 1) #round salinity & temperature to one decimal place
Means[,12:13]<- round(Means[,12:13],3) #round calcite & aragonite sat to 3 decimal places
Means[,5:11]<-round(Means[,5:11]) # round AT, DIC, pCO2, CO3, CO2, and HCO3 to no decimal places.
SDs<- ddply(Data, .(Trt), numcolwise(sd, na.rm=T))
SDs[,2]<- round(SDs[,2], 2) #round pH to 2 decimal places
SDs[,3:4]<- round(SDs[,3:4], 1) #round salinity & temperature to one decimal place
SDs[,12:13]<- round(SDs[,12:13], 3) #round calcite & aragonite sat to 3 decimal places
SDs[,5:11]<-round(SDs[,5:11]) # round AT, DIC, pCO2, CO3, CO2, and HCO3 to no decimal places.
Mins<- ddply(Data, .(Trt), numcolwise(min, na.rm=T))
Mins[,2]<- round(Mins[,2], 2) #round pH to 2 decimal places
Mins[,3:4]<- round(Mins[,3:4], 1) #round salinity & temperature to one decimal place
Mins[,12:13]<- round(Mins[,12:13], 3) #round calcite & aragonite sat to 3 decimal places
Mins[,5:11]<-round(Mins[,5:11]) # round AT, DIC, pCO2, CO3, CO2, and HCO3 to no decimal places.
Maxs<- ddply(Data, .(Trt), numcolwise(max, na.rm=T))
Maxs[,2]<- round(Maxs[,2], 2) #round pH to 2 decimal places
Maxs[,3:4]<- round(Maxs[,3:4], 1) #round salinity & temperature to one decimal place
Maxs[,12:13]<- round(Maxs[,12:13], 3) #round calcite & aragonite sat to 3 decimal places
Maxs[,5:11]<-round(Maxs[,5:11]) # round AT, DIC, pCO2, CO3, CO2, and HCO3 to no decimal places.
RangesControl<- paste(Mins[1,2:13], Maxs[1,2:13], sep="-")
RangesExp<- paste(Mins[2,2:13], Maxs[2,2:13], sep="-") #note, you will  need to add more if you have >2 treatments
Counts<- ddply(Data, .(Trt), numcolwise(length))
#put all of the data into the summary table
CarbChemTable[,3]<-paste(c("", Means[1,8], SDs[1,8], RangesControl[7], Counts[1,8], Means[1,7], SDs[1,7], RangesControl[6], Counts[1,7], Means[1,10], SDs[1,10], RangesControl[9], Counts[1,10], Means[1,9], SDs[1,9], RangesControl[8], Counts[1,9],Means[1,11], SDs[1,11], RangesControl[10], Counts[1,11], Means[1,12], SDs[1,12], RangesControl[11], Counts[1,12],Means[1,13], SDs[1,13], RangesControl[12], Counts[1,13], "", Means[1,3], SDs[1,3], RangesControl[2], Counts[1,3], Means[1,4], SDs[1,4], RangesControl[3], Counts[1,4],Means[1,2], SDs[1,2], RangesControl[1], Counts[1,2], Means[1,5], SDs[1,5], RangesControl[4], Counts[1,5], Means[1,6], SDs[1,6], RangesControl[5], Counts[1,6]))
CarbChemTable[,4]<-paste(c("", Means[2,8], SDs[2,8], RangesExp[7], Counts[2,8], Means[2,7], SDs[2,7], RangesExp[6], Counts[2,7], Means[2,10], SDs[2,10], RangesExp[9], Counts[2,10], Means[2,9], SDs[2,9], RangesExp[8], Counts[2,9],Means[2,11], SDs[2,11], RangesExp[10], Counts[2,11], Means[2,12], SDs[2,12], RangesExp[11], Counts[2,12],Means[2,13], SDs[2,13], RangesExp[12], Counts[2,13], "", Means[2,3], SDs[2,3], RangesExp[2], Counts[2,3], Means[2,4], SDs[2,4], RangesExp[3], Counts[2,4],Means[2,2], SDs[2,2], RangesExp[1], Counts[2,2], Means[2,5], SDs[2,5], RangesExp[4], Counts[2,5], Means[2,6], SDs[2,6], RangesExp[5], Counts[2,6]))
CarbChemTable
}
# Chunk 4: LoadData
#setwd("~/Repos/LarvaeTransGen2018")
setwd("~/R/GitHub/LarvaeTransGen2018/data") #Elise's working directory
#import all of the data tables for the larvae experiment
Larvae_Morphology <- read.csv("../data/Larvae_morphology.csv") #contains data from CellProfiler from the larvae outlines
Barcode_Jar <- read.csv("../data/Barcode_Jar.csv") #contains data on CrossID, seatable, and whether or not larvae were present
Block_ID <- read.csv("../data/Block_ID.csv") #contains data on the block
Cross<- read.csv("../data/Cross.csv") #contains data on the female and male IDs for the cross and whether the cross was for QG or Meth
Fert_QG<- read.csv("../data/Fert_QG.csv") #contains data on fertilization counts, the JarIDs for the crosses
Header_WC<- read.csv("../data/Header_WC.csv") #contains data on the header tanks used to fill the jars
Larvae_Calcification <- read.csv("../data/Larvae_Calcification.csv") #contains data on filter weights and counts
Larvae_Calcification<- subset(Larvae_Calcification, JarID != "")
Larvae_Counts <- read.csv("../data/Larvae_Counts.csv") #contains data on sedgewick rafter larvae counts
Larvae_WC <- read.csv("../data/Larvae_WC.csv") #contains data on larvae jar water chemistry
Parent_ID <- read.csv("../data/Parent_ID.csv") #contains data on the adults at the time of shucking. Includes Parent ID assignments
Egg_Morphology<- read.csv("../data/Egg_Morphology.csv") #contains data on egg sizes from CellProfiler
Adult_Sample<- read.csv("../data/Adult_Sample.csv") #contains data on adult oysters at the time of collection
WC_Standard<- read.csv("../data/WC_Standard.csv") #contains data on the standards used for water chemistry
Tank_WC<- read.csv("../data/Tank_WC.csv") #contains data on the adult tank water chemistry
# Chunk 5: MakeFieldsFactors
Adult_Sample$AccTankID<- factor(Adult_Sample$AccTankID)
Adult_Sample$TrtTankID<- factor(Adult_Sample$TrtTankID)
Barcode_Jar$JarSeatable<- factor(Barcode_Jar$JarSeatable)
Barcode_Jar<- subset(Barcode_Jar, JarSeatable =="2" | JarSeatable =="4" | JarSeatable =="6")
Tank_WC$ParentTrt<- factor(Tank_WC$ParentTrt)
Tank_WC$Tank<- factor(Tank_WC$Tank)
WC_Standard$CRM<- factor(WC_Standard$CRM)
Larvae_WC$DateFilter<- factor(Larvae_WC$DateFilter)
Larvae_Morphology$LarvaeMorphID<- factor(Larvae_Morphology$LarvaeMorphID)
#subset the tank data to only include B1 and only those that are to be used for water chemistry.
Tank_WCB1<- subset(Tank_WC, UseForCalcite == "TRUE")
Tank_WCB1$Tank<-droplevels(Tank_WCB1)$Tank #drop unused levels
Tank_WCB1$ParentTrt<- droplevels(Tank_WCB1)$ParentTrt
#test to see if tanks are significantly different (they should not be)
boxplot(SatArag_ATDIC~Tank, data=Tank_WCB1, na.omit=TRUE)
#check for significant differences in saturation state between treatments
Ca1<- t.test(SatArag_ATDIC~ParentTrt, data=Tank_WCB1, var.equal=T)
Ca1
#check assumptions
par(mfcol=c(2,2))
plot(Ca3) #seems to meet assumptions of homoscedasticity and linearity.
plot(Ca1) #seems to meet assumptions of homoscedasticity and linearity.
par(mfcol=c(1,1))
#check assumptions
qqpot(SatArag_ATDIC~ParentTrt, data=Tank_WCB1)
#check assumptions
qqplot(SatArag_ATDIC~ParentTrt, data=Tank_WCB1)
#check assumptions
qqplot(Tank_WCB1$SatArag_ATDIC, Tank_WCB1$ParentTrt)
#check assumptions
qqnorm(Tank_WCB1$SatArag_ATDIC, Tank_WCB1$ParentTrt)
#check assumptions
qqnorm(Tank_WCB1$SatArag_ATDIC~Tank_WCB1$ParentTrt)
#check assumptions
qqnorm(resid(Ca1))
#check assumptions
qqnorm(Tank_WCB1$SatArag_ATDIC)
#check assumptions
Tank_WCB1_con<- subset(Tank_WCB1, ParentTrt=="400")
qqnorm(Tank_WCB1_con$SatArag_ATDIC)
qqline(Tank_WCB1_con$SatArag_ATDIC)
Tank_WCB1_exp<- subset(Tank_WCB1, ParentTrt=="2600")
qqnorm(Tank_WCB1_expSatArag_ATDIC)
qqnorm(Tank_WCB1_exp$SatArag_ATDIC)
qqline(Tank_WCB1_exp$SatArag_ATDIC)
plot(Ca1)
boxplot(SatArag_ATDIC~ParentTrt, data=Tank_WCB1)
leveneTest(data= Tank_WCB1, SatArag_ATDIC, center=mean)
leveneTest(data= Tank_WCB1, SatArag_ATDIC, center=mean)
leveneTest(data= Tank_WCB1, SatArag_ATDIC~ParentTrt, center=mean)
#check for significant differences in saturation state between treatments
Ca1<- t.test(SatArag_ATDIC~ParentTrt, data=Tank_WCB1, var.equal=F)
Ca1
CalJar<- subset(LarvByJarDat, BottleChemistry=="TRUE" )#subset for jars that had bottle chemistry measured
# Chunk 1: LoadLibraries
library(knitr)
library(lmodel2)
library(cowplot)
library(effects)
library(plyr)
library(tidyverse)
library(sciplot)
library(reshape2)
library(lme4)
library(lmerTest)
library(blme)
library(grid)
library(data.table)
library(gridExtra)
library(lattice)
library(optimx)
library(car)
library(Hmisc)
library(DescTools)
library(corrplot)
library(emmeans)
library(chron)
library(GLMMadaptive)
library(calibrate)
library(merTools)
library(bootpredictlme4)
library(visreg)
library(viridis)
library(plotrix)
library(MuMIn)
# Chunk 2
knitr::opts_chunk$set(error = TRUE)
# Chunk 3: ChemSummary Table Function
CarbChemTable<- as.data.frame(matrix(nrow=50, ncol=4)) # make a table to hold the carbonate summary data. This table will be for just 2 pCO2 levels: Control & OA
colnames(CarbChemTable)<- paste(c("Parameter", "Statistic", "Control", "OA"))
CarbChemTable$Parameter<- c("CALCULATED PARAMETERS", "pCO2(gas-e)", rep("", times=3), "TA",rep("", times=3),"[CO32-]",rep("", times=3), "[HCO3-]", rep("", times=3), "[CO2](aq)", rep("", times=3), "SatCalcite", rep("", times=3), "SatAragonite", rep("", times=3),"MEASURED PARAMETERS", "salinity", rep("", times=3), "Temperature", rep("", times=3),"pH", rep("", times=3), "DIC", rep("", times=3), "TA", rep("", times=3))
CarbChemTable$Statistic<- paste(c("", "(ppm-v)", "SD", "Range", "n",
"(uM)", "SD", "Range", "n",
"(uM)", "SD", "Range", "n",
"(uM)", "SD", "Range", "n",
"(uM)", "SD", "Range", "n",
"", "SD", "Range", "n",
"", "SD", "Range", "n", "",
"(ppt)", "SD", "Range", "n",
"(C)", "SD", "Range", "n",
"(Total)", "SD", "Range", "n",
"(uM)", "SD", "Range", "n",
"(uM)", "SD", "Range", "n")) #note you will have to change the pH scale if you aren't using the total scale
#now that table has been made, we can fill it in with the values using the CarbChemSummary function
#name the column rows the following:
# Trt - treatment
# pH
# Sal - salinity
# Temp - temperature
# DIC
# ATmeas - AT measured
# ATcalc - AT calculated
# pCO2
# HCO3
# CO3
# CO2
# Calcite - calcite saturation state
# Aragonite - aragonite saturation state
CarbChemSummary<- function(DF){
Data<- subset(DF, select= c("Trt", "pH", "Sal", "Temp", "DIC", "ATmeas", "ATcalc", "pCO2", "HCO3", "CO3", "CO2", "Calcite", "Aragonite")) #select only the relevant fields
Means<- ddply(Data, .(Trt), numcolwise(mean, na.rm=T)) #get the means
Means[,2]<- round(Means[,2], 2) #round pH to 2 decimal places
Means[,3:4]<- round(Means[,3:4], 1) #round salinity & temperature to one decimal place
Means[,12:13]<- round(Means[,12:13],3) #round calcite & aragonite sat to 3 decimal places
Means[,5:11]<-round(Means[,5:11]) # round AT, DIC, pCO2, CO3, CO2, and HCO3 to no decimal places.
SDs<- ddply(Data, .(Trt), numcolwise(sd, na.rm=T))
SDs[,2]<- round(SDs[,2], 2) #round pH to 2 decimal places
SDs[,3:4]<- round(SDs[,3:4], 1) #round salinity & temperature to one decimal place
SDs[,12:13]<- round(SDs[,12:13], 3) #round calcite & aragonite sat to 3 decimal places
SDs[,5:11]<-round(SDs[,5:11]) # round AT, DIC, pCO2, CO3, CO2, and HCO3 to no decimal places.
Mins<- ddply(Data, .(Trt), numcolwise(min, na.rm=T))
Mins[,2]<- round(Mins[,2], 2) #round pH to 2 decimal places
Mins[,3:4]<- round(Mins[,3:4], 1) #round salinity & temperature to one decimal place
Mins[,12:13]<- round(Mins[,12:13], 3) #round calcite & aragonite sat to 3 decimal places
Mins[,5:11]<-round(Mins[,5:11]) # round AT, DIC, pCO2, CO3, CO2, and HCO3 to no decimal places.
Maxs<- ddply(Data, .(Trt), numcolwise(max, na.rm=T))
Maxs[,2]<- round(Maxs[,2], 2) #round pH to 2 decimal places
Maxs[,3:4]<- round(Maxs[,3:4], 1) #round salinity & temperature to one decimal place
Maxs[,12:13]<- round(Maxs[,12:13], 3) #round calcite & aragonite sat to 3 decimal places
Maxs[,5:11]<-round(Maxs[,5:11]) # round AT, DIC, pCO2, CO3, CO2, and HCO3 to no decimal places.
RangesControl<- paste(Mins[1,2:13], Maxs[1,2:13], sep="-")
RangesExp<- paste(Mins[2,2:13], Maxs[2,2:13], sep="-") #note, you will  need to add more if you have >2 treatments
Counts<- ddply(Data, .(Trt), numcolwise(length))
#put all of the data into the summary table
CarbChemTable[,3]<-paste(c("", Means[1,8], SDs[1,8], RangesControl[7], Counts[1,8], Means[1,7], SDs[1,7], RangesControl[6], Counts[1,7], Means[1,10], SDs[1,10], RangesControl[9], Counts[1,10], Means[1,9], SDs[1,9], RangesControl[8], Counts[1,9],Means[1,11], SDs[1,11], RangesControl[10], Counts[1,11], Means[1,12], SDs[1,12], RangesControl[11], Counts[1,12],Means[1,13], SDs[1,13], RangesControl[12], Counts[1,13], "", Means[1,3], SDs[1,3], RangesControl[2], Counts[1,3], Means[1,4], SDs[1,4], RangesControl[3], Counts[1,4],Means[1,2], SDs[1,2], RangesControl[1], Counts[1,2], Means[1,5], SDs[1,5], RangesControl[4], Counts[1,5], Means[1,6], SDs[1,6], RangesControl[5], Counts[1,6]))
CarbChemTable[,4]<-paste(c("", Means[2,8], SDs[2,8], RangesExp[7], Counts[2,8], Means[2,7], SDs[2,7], RangesExp[6], Counts[2,7], Means[2,10], SDs[2,10], RangesExp[9], Counts[2,10], Means[2,9], SDs[2,9], RangesExp[8], Counts[2,9],Means[2,11], SDs[2,11], RangesExp[10], Counts[2,11], Means[2,12], SDs[2,12], RangesExp[11], Counts[2,12],Means[2,13], SDs[2,13], RangesExp[12], Counts[2,13], "", Means[2,3], SDs[2,3], RangesExp[2], Counts[2,3], Means[2,4], SDs[2,4], RangesExp[3], Counts[2,4],Means[2,2], SDs[2,2], RangesExp[1], Counts[2,2], Means[2,5], SDs[2,5], RangesExp[4], Counts[2,5], Means[2,6], SDs[2,6], RangesExp[5], Counts[2,6]))
CarbChemTable
}
# Chunk 4: LoadData
#setwd("~/Repos/LarvaeTransGen2018")
setwd("~/R/GitHub/LarvaeTransGen2018/data") #Elise's working directory
#import all of the data tables for the larvae experiment
Larvae_Morphology <- read.csv("../data/Larvae_morphology.csv") #contains data from CellProfiler from the larvae outlines
Barcode_Jar <- read.csv("../data/Barcode_Jar.csv") #contains data on CrossID, seatable, and whether or not larvae were present
Block_ID <- read.csv("../data/Block_ID.csv") #contains data on the block
Cross<- read.csv("../data/Cross.csv") #contains data on the female and male IDs for the cross and whether the cross was for QG or Meth
Fert_QG<- read.csv("../data/Fert_QG.csv") #contains data on fertilization counts, the JarIDs for the crosses
Header_WC<- read.csv("../data/Header_WC.csv") #contains data on the header tanks used to fill the jars
Larvae_Calcification <- read.csv("../data/Larvae_Calcification.csv") #contains data on filter weights and counts
Larvae_Calcification<- subset(Larvae_Calcification, JarID != "")
Larvae_Counts <- read.csv("../data/Larvae_Counts.csv") #contains data on sedgewick rafter larvae counts
Larvae_WC <- read.csv("../data/Larvae_WC.csv") #contains data on larvae jar water chemistry
Parent_ID <- read.csv("../data/Parent_ID.csv") #contains data on the adults at the time of shucking. Includes Parent ID assignments
Egg_Morphology<- read.csv("../data/Egg_Morphology.csv") #contains data on egg sizes from CellProfiler
Adult_Sample<- read.csv("../data/Adult_Sample.csv") #contains data on adult oysters at the time of collection
WC_Standard<- read.csv("../data/WC_Standard.csv") #contains data on the standards used for water chemistry
Tank_WC<- read.csv("../data/Tank_WC.csv") #contains data on the adult tank water chemistry
# Chunk 5: MakeFieldsFactors
Adult_Sample$AccTankID<- factor(Adult_Sample$AccTankID)
Adult_Sample$TrtTankID<- factor(Adult_Sample$TrtTankID)
Barcode_Jar$JarSeatable<- factor(Barcode_Jar$JarSeatable)
Barcode_Jar<- subset(Barcode_Jar, JarSeatable =="2" | JarSeatable =="4" | JarSeatable =="6")
Tank_WC$ParentTrt<- factor(Tank_WC$ParentTrt)
Tank_WC$Tank<- factor(Tank_WC$Tank)
WC_Standard$CRM<- factor(WC_Standard$CRM)
Larvae_WC$DateFilter<- factor(Larvae_WC$DateFilter)
Larvae_Morphology$LarvaeMorphID<- factor(Larvae_Morphology$LarvaeMorphID)
# Chunk 6: AdultTankChemistry
#subset the tank data to only include B1 and only those that are to be used for water chemistry.
Tank_WCB1<- subset(Tank_WC, UseForCalcite == "TRUE")
Tank_WCB1$Tank<-droplevels(Tank_WCB1)$Tank #drop unused levels
Tank_WCB1$ParentTrt<- droplevels(Tank_WCB1)$ParentTrt
#check for significant differences in saturation state between treatments
boxplot(SatArag_ATDIC~ParentTrt, data=Tank_WCB1)
#perform a Welch's two sample t-test since data are heteroscedastic
Ca1<- t.test(SatArag_ATDIC~ParentTrt, data=Tank_WCB1, var.equal=F)
Ca1
Tank_WCB1_con<- subset(Tank_WCB1, ParentTrt=="400")
Tank_WCB1_exp<- subset(Tank_WCB1, ParentTrt=="2600")
qqnorm(Tank_WCB1_con$SatArag_ATDIC)
qqline(Tank_WCB1_con$SatArag_ATDIC)
qqnorm(Tank_WCB1_exp$SatArag_ATDIC)
qqline(Tank_WCB1_exp$SatArag_ATDIC)
#data are normal
# Chunk 7: TankMeans
#create data frame that has the mean values for each tank
TankMeans<- ddply(Tank_WCB1, .(Tank, Block, ParentTrt), numcolwise(mean, na.rm=T))
TankSes<- ddply(Tank_WCB1, .(Tank, Block, ParentTrt), numcolwise(se, na.rm=T))
# Chunk 8: CarbChemSummaryTable
Tank_WCB1sum<- subset(Tank_WCB1, select=c("ParentTrt", "pHTotal", "salinity", "temperature", "DIC_corr", "Alk_corr", "AT_Calc_SW", "pCO2_ATDIC", "HCO3_ATDIC", "CO3_ATDIC", "CO2_ATDIC", "SatCalcite_ATDIC", "SatArag_ATDIC"))
colnames(Tank_WCB1sum)<- paste(c("Trt", "pH", "Sal", "Temp", "DIC", "ATmeas","ATcalc", "pCO2", "HCO3", "CO3", "CO2", "Calcite", "Aragonite"))
CarbChemTanks<- CarbChemSummary(DF=Tank_WCB1sum)
#write.csv(CarbChemTanks,"~/R/GitHub/LarvaeTransGen2018/data/TankCarbChemSummary.csv")
# Chunk 9: JoinDataForEggAnalysis
#First data frame will be for examining egg morphology for all eggs traced; multiple values for each adult
AdultSampParID<- merge(x=Adult_Sample, y=Parent_ID, by="AdultID", all.x=TRUE)
AdultSampParID<- merge(x=AdultSampParID, y=TankMeans, by.x="TrtTankID", by.y="Tank", all.x=TRUE)
AdultSampParID<- subset(AdultSampParID, ParentBlockID !="NA")
AdultSampParID<- subset(AdultSampParID, Block =="B1")
MaleInfo<- subset(AdultSampParID, Sex=="M")
FemaleInfo<- subset(AdultSampParID, Sex=="F")
colnames(MaleInfo)<- paste("Male", colnames(MaleInfo), sep="")
Eggs<- merge(x=Egg_Morphology, y=FemaleInfo, by.x="FemaleID", by.y="ParentBlockID", all.x=TRUE)
Eggs$FemaleID<- as.factor(Eggs$FemaleID)
#subset the data to only include B1
EggsB1<- subset(Eggs, Block =="B1")
# Chunk 10: EggVisualization
#get the original range of the eggs
range(EggsB1$EggDiamum)
#look at the egg measurements to see outliers
boxplot(EggDiamum~FemaleID, data=EggsB1)
boxplot(EggDiamum~ParentTrt, data=EggsB1)
# Chunk 11: EggSizeStat AllEggs
CalEggs<- EggsB1
eggdiam1AllEggs<- lmer(EggDiamum~ParentTrt*AdultLength + (1|FemaleID)  + (1|AccTankID), data=CalEggs)
eggstepAllEggs<-step(eggdiam1AllEggs)
print(eggstepAllEggs)
#final model chosen: EggDiamum~ 1 + (1|FemaleID)
eggdiamfinAllEggs<- lmer(EggDiamum~1+(1|FemaleID), data=CalEggs)
#Check assumptions
par(mfcol=c(1,1))
qqnorm(resid(eggdiamfinAllEggs))
qqline(resid(eggdiamfinAllEggs))
plot(eggdiamfinAllEggs)
acf(resid(eggdiamfinAllEggs))
summary(eggdiamfinAllEggs)
#Conclusion: Female matters but not treatment or adult length. Acclimation tank and treatment tank also don't matter.
plot(EggDiamum~FemaleID, data=CalEggs) #we need to account for FemaleID, but not egg size in Larvae models.
#test shape of eggs using eccentricity
eggeccenAllEggs<- lmer(EggEccentricity~ParentTrt*AdultLength + (1|FemaleID) + (1|AccTankID), data=CalEggs)
eccenstepAllEggs<- step(eggeccenAllEggs)
print(eccenstepAllEggs)
eggeccenfinAllEggs<- lmer(EggEccentricity~(1|FemaleID), data=CalEggs)
qqnorm(resid(eggeccenfinAllEggs))
qqline(resid(eggeccenfinAllEggs))
plot(eggeccenfinAllEggs)
acf(resid(eggeccenfinAllEggs))
summary(eggeccenfinAllEggs)
# Chunk 12: EggOutlierRemoval
par(mar=c(1,1,1,1))
#check for outliers using code from https://www.r-bloggers.com/identify-describe-plot-and-remove-the-outliers-from-the-dataset/. The function uses Tukey's method to ID outliers ranged above and below the 1.5*IQR.
outlierKD <- function(dt, var) {
var_name <- eval(substitute(var),eval(dt))
na1 <- sum(is.na(var_name))
m1 <- mean(var_name, na.rm = T)
par(mfrow=c(2, 2), oma=c(0,0,3,0))
boxplot(var_name, main="With outliers")
hist(var_name, main="With outliers", xlab=NA, ylab=NA)
outlier <- boxplot.stats(var_name)$out
mo <- mean(outlier)
var_name <- ifelse(var_name %in% outlier, NA, var_name)
boxplot(var_name, main="Without outliers")
hist(var_name, main="Without outliers", xlab=NA, ylab=NA)
title("Outlier Check", outer=TRUE)
na2 <- sum(is.na(var_name))
cat("Outliers identified:", na2 - na1, "n")
cat("Propotion (%) of outliers:", round((na2 - na1) / sum(!is.na(var_name))*100, 1), "n")
cat("Mean of the outliers:", round(mo, 2), "n")
m2 <- mean(var_name, na.rm = T)
cat("Mean without removing outliers:", round(m1, 2), "n")
cat("Mean if we remove outliers:", round(m2, 2), "n")
dt[as.character(substitute(var))] <- invisible(var_name)
assign(as.character(as.list(match.call())$dt), dt, envir = .GlobalEnv)
cat("Outliers successfully removed", "n")
return(invisible(dt))
}
outlierKD(EggsB1, EggDiamum)
#Outliers identified: 48 nPropotion (%) of outliers: 11.5 nMean of the outliers: 57.63 nMean without removing outliers: 62.4 nMean if we remove outliers: 62.95 n
#count how many eggs are left per female after removing the outliers.
outrem<- aggregate(EggDiamum~FemaleID, data=EggsB1, FUN=length)
#EF07_B1 had 10 eggs that were included the rest were removed. Keep EF07_B1 in the analysis
#remove eggs that have NAs for EggDiamum
EggsB1<- subset(EggsB1, EggDiamum != "NA")
EggsB1$EggPerimeterum<- EggsB1$EggPerimeterPix/8.892  #add a column to convert egg perimeter to um based on the scaled slide
EggsB1$EggPerimDiamRat<- EggsB1$EggPerimeterum/EggsB1$EggDiamum #add a column for the ratio of perimeter to diameter
# Chunk 13: EggVisualizationNoOutliers
#Plot again without outliers
par(mfcol=c(1,1), mar=c(2,2,2,2))
boxplot(EggDiamum~FemaleID, data=EggsB1)
boxplot(EggDiamum~ParentTrt, data=EggsB1)
#get the range without outliers
range(EggsB1$EggDiamum, na.rm=TRUE)
#eggs were filtered through a 70 um filter, but it appears that larger ones made it through.
#plot histograms of the egg data with outliers removed
ggplot(EggsB1, aes(x=EggDiamum, color=ParentTrt))+
geom_histogram(alpha=0.5, position="identity")
eggmeans<- aggregate(EggDiamum~ParentTrt, data=EggsB1, FUN=mean) #400 = 63.45709; 2800= 62.36829
eggmedians<- aggregate(EggDiamum~ParentTrt, data=EggsB1, FUN=median)#400 = 62.91200; 2800= 62.06727
#I will use the mean egg size.
# Chunk 14: MakeLarvaeDataframes
meanegg<- ddply(EggsB1, .(FemaleID), numcolwise(mean, na.rm=T)) #get mean egg size
#select only columns that we need for egg morphology
meanegg<- subset(meanegg, select=c("FemaleID", "EggDiamum"))
FemAdults<- merge(x=FemaleInfo, y= meanegg, by.x="ParentBlockID", by.y= "FemaleID", all.y=TRUE, all.x=TRUE)
#Next dataframe will be for one line per traced larva, includes all the data for that jar, including average egg size for that jar
Larvae<-merge(x=Larvae_Morphology, y=Barcode_Jar, by="JarID", all.x=TRUE) %>% merge(y=Larvae_WC, by="JarID", all.x=TRUE, all.y=TRUE)
#use gather function in tidyr to make the Fert_QG Jar ID columns in long form vs. wide form
Fert_QG_long <- Fert_QG %>% tidyr::gather(Key, JarID, JarID1:JarID6)
#use the gathered data frame to merge with Larvae
Larvae<-merge(x=Larvae, y=Fert_QG_long, by.x= c("JarID", "CrossID"), by.y=c("JarID", "CrossID"), all.x=TRUE) %>% merge(y=Cross, by="CrossID", all.x=TRUE) %>%  merge(y=FemAdults, by.x= "FemaleID", by.y="ParentBlockID", all.x=TRUE) %>% merge(y=MaleInfo, by.x= "MaleID", by.y="MaleParentBlockID", all.x=TRUE) %>% merge(y= Larvae_Counts, by="JarID", all.x=TRUE)
#Remove jars without larvae
Larvae<- subset(Larvae, Larvae=="TRUE")
#Get a fixed date and time column
str(Larvae$DateFixed)
Larvae$FixedDateFormatted<- as.Date(as.character(Larvae$DateFixed),format="%Y%m%d")
Larvae$FixedDateTime<- as.POSIXct(paste(Larvae$FixedDateFormatted, Larvae$TimeFixed), format="%Y-%m-%d %H:%M")
#get the growth per day for the larva
Larvae$GrowthPerDay<- (Larvae$LarvaeDiamum*(mean(eggmeans$EggDiamum)/Larvae$EggDiamum))/3
#Next data frame will be one line per Jar, includes all data for the jar, including the average larva size per jar and cilia
LarvByJar<- merge(x=Larvae_Calcification, y=Barcode_Jar, by="JarID", all.x=TRUE) %>%  merge(y=Larvae_WC, by="JarID", all.x=TRUE)%>% merge(y=Fert_QG_long, by.x=c("JarID", "CrossID"), by.y=c("JarID","CrossID"), all.x=TRUE) %>% merge(y=Cross, by="CrossID", all.x=TRUE) %>%
merge(y=FemAdults, by.x="FemaleID", by.y="ParentBlockID", all.x=TRUE) %>% merge(y=MaleInfo, by.x="MaleID", by.y="MaleParentBlockID", all.x=TRUE) %>% merge(y=Larvae_Counts, by="JarID", all.x=TRUE)
#get the means for larvae morphology and add to LarvByJar
MeanLarvMorph<- ddply(Larvae_Morphology, .(JarID), numcolwise(mean, na.rm=T))
SELarvMorph<- ddply(Larvae_Morphology, .(JarID), numcolwise(se, na.rm=T)) #get standard error of larva size
MeanLarvMorph<- full_join(MeanLarvMorph,SELarvMorph, by="JarID", suffix=c("", "SE")) #join the mean and se larvae data
LarvByJar<- merge(x=LarvByJar, y=MeanLarvMorph, by="JarID", all.x=TRUE)
LarvByJar$MeanGPD<- (LarvByJar$LarvaeDiamum*(mean(eggmeans$EggDiamum)/LarvByJar$EggDiamum))/3
#Now let's add the survival data. See notes on "Larvae Survival" for more info on how we decided to count total larvae in the jar
#Make columns for the two larvae counts for 1_5 and 2
LarvByJar$v1_5SurvCount<- rowSums(LarvByJar[,c("SWRTotal", "F2LarvaeCount")], na.rm=TRUE)
LarvByJar$v2SurvCount<- rowSums(LarvByJar[,c("F1LarvaeCount", "F2LarvaeCount")], na.rm=TRUE)
#use ifelse statement to define the LarvaeSurvived column
LarvByJar$LarvaeSurvived<- ifelse(LarvByJar$ProtocolVersion =="1", paste(LarvByJar$TotalLarvae), ifelse(LarvByJar$ProtocolVersion =="1_5", paste(LarvByJar$v1_5SurvCount), paste(LarvByJar$v2SurvCount)))
LarvByJar$LarvaeSurvived<- as.numeric(LarvByJar$LarvaeSurvived)
#get the total larvae for the control jars and exposed jars for each family and then get the ratio of exposed to control to get an idea of how good a male and female pair are at larvae surviving. Can also use this to create reaction norms.
SurvDat<- ddply(LarvByJar, .(CrossID, ParentTrt, JarTrt, MaleID, FemaleID, TrtTankID,MaleTrtTankID, AccTankID, Block), numcolwise(mean, na.rm=TRUE))
SESurvDat<- ddply(LarvByJar, .(CrossID, ParentTrt, JarTrt, Block), numcolwise(se, na.rm=TRUE)) #get the standard errors for each mean count
SESurvDat<- subset(SESurvDat, select= c(CrossID, JarTrt, LarvaeSurvived, SatArag_ATDIC, JarSatArg_Total, MeanGPD)) #select only certain columns.
colnames(SESurvDat)<- paste("SE", colnames(SESurvDat), sep="")
#merge the standard error data to the SurvDat dataframe
SurvDat<- merge(SurvDat, SESurvDat, by.x= c("CrossID", "JarTrt"), by.y= c("SECrossID", "SEJarTrt"))
#only keep the relevant fields because otherwise this is a huge data frame
SurvDat<- subset(SurvDat, select= c(CrossID, JarTrt, ParentTrt, MaleID, FemaleID, TrtTankID,MaleTrtTankID, AccTankID, LarvaeSurvived, Block, SELarvaeSurvived, SatArag_ATDIC, MeanGPD, SEMeanGPD))
SurvDat<- subset(SurvDat, Block=="B1" & CrossID !="")
#use the spread function to go from long form to wide form for the survival data
SurvDatToWide<- unite(SurvDat, Value, c(LarvaeSurvived, SELarvaeSurvived, MeanGPD, SEMeanGPD), sep="_")
SurvWideDat<- spread(SurvDatToWide, JarTrt, value= Value)
#now split the mean and SE apart again
SurvWideDat<- separate(SurvWideDat, Control, into= c("MeanLarvSurvivedCon", "SELarvSurvivedCon", "MeanGPDCon", "SEMeanGPDCon"), sep="_")
SurvWideDat<- separate(SurvWideDat, Exposed, into= c("MeanLarvSurvivedExp", "SELarvSurvivedExp", "MeanGPDExp", "SEMeanGPDCExp"), sep="_")
#make the means and ses numeric
SurvWideDat$MeanLarvSurvivedExp<- as.numeric(SurvWideDat$MeanLarvSurvivedExp)
SurvWideDat$MeanLarvSurvivedCon<- as.numeric(SurvWideDat$MeanLarvSurvivedCon)
SurvWideDat$SELarvSurvivedExp<- as.numeric(SurvWideDat$SELarvSurvivedExp)
SurvWideDat$SELarvSurvivedCon<- as.numeric(SurvWideDat$SELarvSurvivedCon)
SurvWideDat$MeanGPDCon<- as.numeric(SurvWideDat$MeanGPDCon)
SurvWideDat$MeanGPDExp<- as.numeric(SurvWideDat$MeanGPDExp)
SurvWideDat$SEMeanGPDCon<- as.numeric(SurvWideDat$SEMeanGPDCon)
SurvWideDat$SEMeanGPDCExp<- as.numeric(SurvWideDat$SEMeanGPDCExp)
SurvWideDat$RatSurv<- SurvWideDat$MeanLarvSurvivedExp/SurvWideDat$MeanLarvSurvivedCon
SurvWideDat$RatGPD<- SurvWideDat$MeanGPDExp/SurvWideDat$MeanGPDCon
SurvWideDat$SurvChange<- (SurvWideDat$MeanLarvSurvivedCon-SurvWideDat$MeanLarvSurvivedExp)/SurvWideDat$MeanLarvSurvivedCon
SurvWideDat$CrossID<- as.factor(SurvWideDat$CrossID)
SurvWideDat$FemaleID<- as.factor(SurvWideDat$FemaleID)
SurvWideDat$MaleID<- as.factor(SurvWideDat$MaleID)
LarvByJar<- subset(LarvByJar, Larvae=="TRUE")
#now remove the data we do not want to analyze.
LarvaeDat<- subset(Larvae, Block == "B1")
#get a column without B1 in the female and male IDs
LarvaeDat$FemIDPlain<- vapply(strsplit(as.character(LarvaeDat$FemaleID),"_"), `[`, 1, FUN.VALUE=character(1))
LarvaeDat$MaleIDPlain<- vapply(strsplit(as.character(LarvaeDat$MaleID),"_"), `[`, 1, FUN.VALUE=character(1))
#now make things factors and drop levels
LarvaeDat$JarID<- as.factor(LarvaeDat$JarID)
LarvaeDat$JarID<-droplevels(LarvaeDat)$JarID
LarvaeDat$AccTankID<- as.factor(LarvaeDat$AccTankID)
LarvaeDat$AccTankID<-droplevels(LarvaeDat)$AccTankID
LarvaeDat$TrtTankID<- as.factor(LarvaeDat$TrtTankID)
LarvaeDat$TrtTankID<-droplevels(LarvaeDat)$TrtTankID
LarvaeDat$MaleTrtTankID<- as.factor(LarvaeDat$MaleTrtTankID)
LarvaeDat$MaleTrtTankID<-droplevels(LarvaeDat)$MaleTrtTankID
LarvaeDat$MaleAccTankID<- as.factor(LarvaeDat$MaleAccTankID)
LarvaeDat$MaleAccTankID<-droplevels(LarvaeDat)$MaleAccTankID
LarvaeDat$JarSeatable<- as.factor(LarvaeDat$JarSeatable)
LarvaeDat$JarSeatable<-droplevels(LarvaeDat)$JarSeatable
LarvaeDat$JarTrt<- as.factor(LarvaeDat$JarTrt)
LarvaeDat$ParentTrt<- as.factor(LarvaeDat$ParentTrt)
LarvaeDat$FemaleID<- as.factor(LarvaeDat$FemaleID)
LarvaeDat$FemaleID<-droplevels(LarvaeDat)$FemaleID
LarvaeDat$MaleID<- as.factor(LarvaeDat$MaleID)
LarvaeDat$MaleID<-droplevels(LarvaeDat)$MaleID
LarvaeDat$CrossID<- as.factor(LarvaeDat$CrossID)
LarvaeDat$CrossID<-droplevels(LarvaeDat)$CrossID
LarvByJarDat<- subset(LarvByJar, Block == "B1" & JarSatArg_Total !="NA")
LarvByJarDat$JarID<- as.factor(LarvByJarDat$JarID)
LarvByJarDat$AccTankID<- as.factor(LarvByJarDat$AccTankID)
LarvByJarDat$TrtTankID<- as.factor(LarvByJarDat$TrtTankID)
LarvByJarDat$MaleAccTankID<- as.factor(LarvByJarDat$MaleAccTankID)
LarvByJarDat$MaleTrtTankID<- as.factor(LarvByJarDat$MaleTrtTankID)
LarvByJarDat$JarSeatable<- as.factor(LarvByJarDat$JarSeatable)
LarvByJarDat$ParentTrt<- as.factor(LarvByJarDat$ParentTrt)
LarvByJarDat$FemaleID<- as.factor(LarvByJarDat$FemaleID)
LarvByJarDat$MaleID<- as.factor(LarvByJarDat$MaleID)
LarvByJarDat$CrossID<- as.factor(LarvByJarDat$CrossID)
LarvByJarDat$JarTrt<- as.factor(LarvByJarDat$JarTrt)
LarvByJarDat$MaleID<-droplevels(LarvByJarDat)$MaleID
LarvByJarDat$FemaleID<-droplevels(LarvByJarDat)$FemaleID
LarvByJarDat$CrossID<-droplevels(LarvByJarDat)$CrossID
LarvByJarDat$FemIDPlain<- vapply(strsplit(as.character(LarvByJarDat$FemaleID),"_"), `[`, 1, FUN.VALUE=character(1))
LarvByJarDat$MaleIDPlain<- vapply(strsplit(as.character(LarvByJarDat$MaleID),"_"), `[`, 1, FUN.VALUE=character(1))
LarvByJarDat$MaleIDNumber<- substr(LarvByJarDat$MaleIDPlain, 3, 4 )
LarvByJarDat$FemaleIDNumber<- substr(LarvByJarDat$FemIDPlain, 3, 4 )
LarvaeDat$PerimLenRat<-LarvaeDat$LarvaePerimeterum/LarvaeDat$LarvaeDiamum #get the perimeter to length ratio for the larvae
CalJar<- subset(LarvByJarDat, BottleChemistry=="TRUE" )#subset for jars that had bottle chemistry measured
#look at the saturation state for jars
boxplot(JarSatArg_Total~JarTrt, data=CalJar)
leveneTest(data=CalJar, JarSatArg_Total~JarTrt, center=mean)
#data are heteroscedastic
Jar2<- lmer(JarSatArg_Total~JarTrt, data=CalJar, var.equal=F)
#data are heteroscedastic
Jar2<- t.test(JarSatArg_Total~JarTrt, data=CalJar, var.equal=F)
Jar2
CalJar_con<- subset(CalJar, JarTrt= "control")
CalJar_con<- subset(CalJar, JarTrt== "control")
CalJar_con<- subset(CalJar, JarTrt== "Control")
CalJar_exp<- subset(CalJar, JarTrt== "Exposed")
qqnorm(CalJar_con$JarSatArg_Total)
qqline(CalJar_con$JarSatArg_Total)
qqnorm(CalJar_exp$JarSatArg_Total)
qqline(CalJar_exp$JarSatArg_Total)
Jar2
sample(1:11, 2, replace=F)
sample(1:6, 2, replace=F)
sample(1:5, 2, replace=F)
sample(1:6, 2, replace=F)
sample(1:5, 2, replace=F)
sample(1:6, 2, replace=F)
sample(1:4, 2, replace=F)
sample(1:5, 2, replace=F)
sample(1:5, 2, replace=F)
sample(1:6, 2, replace=F)
sample(1:5, 2, replace=F)
sample(1:5, 2, replace=F)
sample(1:5, 2, replace=F)
sample(1:4, 2, replace=F)
sample(1:4, 1, replace=F)
sample(1:3, 1, replace=F)
sample(1:4, 1, replace=F)
sample(1:2, 1, replace=F)
sample(1:3, 1, replace=F)
sample(1:4, 1, replace=F)
sample(1:3, 1, replace=F)
sample(1:3, 1, replace=F)
sample(1:3, 1, replace=F)
sample(1:3, 1, replace=F)
sample(1:2, 1, replace=F)
